package com.iitm.raj.hello;

import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class CamelExplicitSplitter {

	static Map<String, Set<String>> wordList = new HashMap<String, Set<String>>();
	static Map<String, Set<String>> wrdUnsplitUnknown = new HashMap<String, Set<String>>();
	static Map<String, Set<String>> wrdSplit = new HashMap<String, Set<String>>();
	static DictWordChecker dctWrdChk = new DictWordChecker();
	
	@SuppressWarnings({ "static-access" })
	public static void idfyIdentifiers(String path) {

		// parsing java file into ast parser
		ASTReader ast = new ASTReader();
		try {
			Set<String> names1 = ast.parse(ast.readFileToString(path));
			for (String identifiers : names1) {
				StringBuilder identifier = new StringBuilder(identifiers);
				// System.out.println(identifiers);

				
				
				//Checking whether the extracted identifiers are an meaningful abbreviation
				Set<String> tempSet = new HashSet<String>();
				if(JSONParserForAbbreviation.isAbbr(identifiers)) {
					Set<String> srdLstForAbbr = JSONParserForAbbreviation.wordForAbbreviation(identifiers);
					tempSet.addAll(srdLstForAbbr);
					wordList.put(identifiers, tempSet);
					srdLstForAbbr.clear();
					
					
				// checking whether the extracted identifiers are dictionary words or not
				}else if (dctWrdChk.check_for_word(identifier) == true) {    
					Set<String> dictWord1 = new HashSet<String>();
					dictWord1.add(identifiers);
					wordList.put(identifiers, dictWord1);
					
					
				// split the composed identifiers
				} else if (identifiers.matches(".*[A-Z0-9_$].*")) {
					Set<String> dictWord2 = new HashSet<String>();
					Set<String> unSplitNames = new HashSet<String>();
					for (String wd : identifiers.split("(?=[A-Z0-9_$])")) {
						 //System.out.println(wd);
						String wd1 = wd.replaceAll("[0-9_$]", "").toLowerCase();
						StringBuilder wrd = new StringBuilder(wd1);
						//System.out.println(wd1);
						if (wd1.length() >= 2 && dctWrdChk.check_for_word(wrd) == true) {
							dictWord2.add(wd1);
						} else if(JSONParserForAbbreviation.isAbbr(wd1) == true){
							// System.out.println(wd1);
							Set<String> setWrdForAbbr = JSONParserForAbbreviation.wordForAbbreviation(wd1);
							dictWord2.addAll(setWrdForAbbr);
							setWrdForAbbr.clear();
						}else {
							
							unSplitNames.add(wd1);
							
						}
					}
					wordList.put(identifiers, dictWord2);
					wrdUnsplitUnknown.put(identifiers, unSplitNames);
					
				//if the identifiers are just string token	
				} else {
					Set<String> unSplitNames = new HashSet<String>();
					unSplitNames.add(identifiers);
					wrdUnsplitUnknown.put(identifiers, unSplitNames);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	
	public static void main(String[] args) {
		idfyIdentifiers("E:\\raaaj\\src\\raj\\BubbleSortExample.java");

		wrdUnsplitUnknown.values().removeIf(Set::isEmpty);
		Set<String> sna = wrdUnsplitUnknown.get("s_Name");
		System.out.println(sna.size());
		  @SuppressWarnings("rawtypes") 
		  Set set = wrdUnsplitUnknown.entrySet();// Converting toSet so that we can traverse
		  
		  @SuppressWarnings("rawtypes") 
		  Iterator itr = set.iterator(); 
		  while
		  (itr.hasNext()) { // Converting to Map.Entry //so that we can get key and value separately
		  
		  @SuppressWarnings("rawtypes") 
		  Map.Entry entry = (Map.Entry) itr.next();
		// System.out.println(entry.getKey()+" "+entry.getValue()); 
		  }
		 
		

	}
}