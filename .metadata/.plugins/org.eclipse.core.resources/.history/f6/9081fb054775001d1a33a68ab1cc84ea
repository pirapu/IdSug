package com.iitm.raj.hello;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.FileEditorInput;

public class HelloHandler extends AbstractHandler {

	@SuppressWarnings("static-access")
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {

		// reading active file name
		IWorkbench wb = PlatformUI.getWorkbench();
		IWorkbenchWindow window = wb.getActiveWorkbenchWindow();
		IWorkbenchPage page = window.getActivePage();
		IEditorPart editor = page.getActiveEditor();
		IEditorInput input = editor.getEditorInput();
		String fileName = input.getName();
		IPath path = ((FileEditorInput) input).getPath();
		String url = path.toString();

		// Accessing ASTParser, finding dictionary words from identifiers, splitting
		// composed identifiers
		String message1 = "";
		String message2 = "";

		CamelExplicitSplitter ces = new CamelExplicitSplitter();
		ces.idfyIdentifiers(url);
		Map<String, Set<String>> dictWords = ces.wordList;
		Set set = dictWords.entrySet();
		Iterator itr = set.iterator();
		while (itr.hasNext()) { // Converting to Map.Entry //so that we can get key and value separately

			@SuppressWarnings("rawtypes")
			Map.Entry entry = (Map.Entry) itr.next();
			//System.out.println(entry.getKey() + " " + entry.getValue());
			//message2.append(entry.getKey() + " " + entry.getValue() + "   ");
			message1 = message1+ entry.getKey() + " " + entry.getValue() + "     ";
		}
		

		// for displaying the identifiers
		Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
		MessageDialog.openInformation(shell, fileName, message1);
		return null;
	}

}
